# -*- coding: utf-8 -*-
"""Customer Segmentation KMeans GFG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18zDLwPffeQJ9xv3vVhz50gJtnNUfQb1w
"""

import pandas as pd  #data manipulation analysis library
import numpy as np #numerical computations
import seaborn as sns # data viz lib on matplotlib
import matplotlib.pyplot as plt #matlab like interface for plot and charts

df= pd.read_csv('Mall_Customers.csv') #reads csv file into df dataframe
df.head(10)

df.shape #col,row

#dataframe summary - non-null values,datatypes,memory usage
df.info

#extracting columnbased on index number
X = df.iloc[:, [3,4]].values #integer-based indexing to extract col 3,4

"""Performing elow method to find optimal no. of clusters

"""

from sklearn.cluster import KMeans #KMeans algo to oartition n obs into k clusters, each obs belongong to cluster with nearest mean
wcss = []    # within-cluster-sum-of-squares to find optimal no.of clusteers by minimising dist of data pt and centroid

for i in range(1,11):
  kmeans = KMeans(n_clusters=i,init ='k-means++', random_state = 0)  #k-mean++ to place intial centroids far away from each other for better result
  kmeans.fit(X)
  wcss.append ( kmeans.inertia_)

"""Plotting Elbow Method
Heuristic used to find no.of clusters in dataset.The explained variation changes rapidly for some values of k (the number of clusters), and then levels off â€” a curve like an elbow. It appears that 5 is the optimal number of clusters in this data.
"""

plt.plot(range(1,11),wcss)
plt.title('the elbow method')
plt.xlabel('no. of clusters')
plt.ylabel('WCSS values')
plt.show()
#elbow at 5

"""Applying KMeans clustering"""

kmeansmodel = KMeans(n_clusters = 5, init='k-means++', random_state =0)
y_kmeans = kmeansmodel.fit_predict (X)

plt.scatter(X[y_kmeans == 0,0], X[y_kmeans == 0,1], s=80, c="red", label = 'Customer 1')
plt.scatter(X[y_kmeans == 1,0], X[y_kmeans == 1,1], s=80, c="blue", label = 'Customer 2')
plt.scatter(X[y_kmeans == 2,0], X[y_kmeans == 2,1], s=80, c="cyan", label = 'Customer 3')
plt.scatter(X[y_kmeans == 3,0], X[y_kmeans == 3,1], s=80, c="yellow", label = 'Customer 4')
plt.scatter(X[y_kmeans == 4,0], X[y_kmeans == 4,1], s=80, c="black", label = 'Customer 5')
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s=100,c='magenta',label ='Centroids')
plt.title('Clusters Of Customers')
plt.xlabel('Annual Income(k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()